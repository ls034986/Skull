#Dependencies
import turtle

#Setting of variables
client = turtle.Turtle() #I named it client because t is confusing.
turtle.getscreen().bgcolor('black') #Coloring background


pl = 10 # I will be drawing in fixed lengths of pixels
turtle.speed(0) #Settig speed

startPosition = [-12*pl, 16*pl]

#Running Code
#Im turning these into functions, because I want to know what certain code does.
client.ht()
client.goto(startPosition[0], startPosition[1])
client.pu()
client.pensize(0)

def topBackground():
  client.pd()
  client.color('white')
  client.begin_fill()
  client.fd(pl*9)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl*2)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl*2)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl*2)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl*8)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl*2)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl*2)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl*4)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl*2)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl*3)
  client.right(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl*2)
  client.left(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl*2)
  client.right(90)
  client.fd(pl*2)
  client.right(90)
  client.fd(pl*2)
  client.left(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl*2)
  client.right(90)
  client.fd(pl*2)
  client.right(90)
  client.fd(pl*2)
  client.left(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl*2)
  client.right(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl*3)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl*2)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl*4)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl*2)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl*2)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl*8)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl*2)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl*2)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl*2)
  client.left(90)
  client.fd(pl)
  client.end_fill()
  client.pu()
  client.goto(0, 0)
  client.setheading(0)

def bottomBackground():
  client.goto(startPosition[0]-(pl*3), startPosition[1]-(pl*25))
  client.setheading(0)
  client.color('white')
  client.pd()
  client.begin_fill()
  client.fd(pl)
  client.right(90)
  client.fd(pl*4)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl*2)
  client.right(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl*2)
  client.left(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl*2)
  client.right(90)
  client.fd(pl*2)
  client.right(90)
  client.fd(pl*2)
  client.left(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl*2)
  client.right(90)
  client.fd(pl*2)
  client.right(90)
  client.fd(pl*2)
  client.left(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl*2)
  client.right(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl*2)
  client.left(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl*4)
  client.right(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl*4)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl*2)
  client.right(90)
  client.fd(pl*2)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl*7)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl*2)
  client.right(90)
  client.fd(pl*2)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl*4)
  client.end_fill()
  client.pu()
  client.setheading(0)

def topBlack():
  client.goto(startPosition[0], startPosition[1]-pl*11)
  client.color('black')
  #start of left brow
  client.pd()
  client.begin_fill()
  client.fd(pl*3)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl*3)
  client.right(90)
  client.fd(pl)
  client.end_fill()
  #End of left brow

  #Transition
  client.pu()
  client.right(90)
  client.fd(pl*6)
  client.pd()
  #End of Transition

  #Start of right brow
  client.begin_fill()
  client.fd(pl*3)
  client.right(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl*3)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl)
  client.end_fill()
  client.pu()
  #End of Right Brow
  client.goto(startPosition[0]+(pl*13), startPosition[1]-(pl*10))
  #Start of Right Crevice
  client.pd()
  client.begin_fill()
  client.right(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl*2)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl*3)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl*3)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl*2)
  client.end_fill()
  client.pu()
  #End of Right Crevice
  client.goto(startPosition[0]-(pl*5), startPosition[1]-(pl*10))
  client.setheading(0)
  #Start Left Crevice
  client.pd()
  client.begin_fill()
  client.fd(pl)
  client.right(90)
  client.fd(pl*2)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl*3)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl*3)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl*2)
  client.end_fill()
  client.pu()
  #End Left Crevice
  client.goto(startPosition[0]-(pl*2), startPosition[1]-(pl*14))
  #Start Eyes
  client.pd()
  client.begin_fill()
  client.right(90)
  client.fd(pl*4)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl*2)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl*2)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl*4)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl*3)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl*3)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl*2)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl*2)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl*2)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl*2)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl*3)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl*3)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl)
  client.end_fill()
  client.pu()
  #End of Eyes
  client.goto(startPosition[0]-(pl*4), startPosition[1]-(pl*20))
  client.setheading(0)
  #Left EyeBag
  client.pd()
  client.begin_fill()
  client.fd(pl)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl*3)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl*2)
  client.right(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl*2)
  client.left(90)
  client.fd(pl*2)
  client.right(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl*2)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl)
  client.end_fill()
  client.pu()
  #End Left EyeBag
  client.goto(startPosition[0]+(pl*7), startPosition[1]-(pl*20))
  client.setheading(0)
  #Right EyeBag
  client.pd()
  client.begin_fill()
  client.fd(pl*2)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl*3)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl*2)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl*2)
  client.left(90)
  client.fd(pl*2)
  client.right(90)
  client.fd(pl)
  client.end_fill()
  client.pu()
  #Bag End
  client.goto(startPosition[0]+(pl*4), startPosition[1]-(pl*18))
  client.setheading(0)
  #Start Nose Socket
  client.pd()
  client.begin_fill()
  client.fd(pl)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl*4)
  client.right(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl)
  client.right(90)
  client.fd(pl*4)
  client.right(90)
  client.fd(pl)
  client.left(90)
  client.fd(pl)
  client.end_fill()
  client.pu()




#Grid is entirly to debug pixel positioning
def grid():
  client.goto(-pl*10,pl*10)
  client.pensize(2)
  client.color('blue')
  client.setheading(0)
  client.pd()
  for i in range(25):
    client.fd(300)
    client.right(90)
    client.fd(pl)
    client.right(90)
    client.fd(300)
    client.left(90)
    client.fd(pl)
    client.left(90)
  client.pu()
  client.goto(-pl*10, pl*10)
  client.setheading(270)
  client.pd()
  for i in range(25):
    client.fd(500)
    client.left(90)
    client.fd(pl)
    client.left(90)
    client.fd(500)
    client.right(90)
    client.fd(pl)
    client.right(90)


#Calling Functions In Order
topBackground()
bottomBackground()
topBlack()
#grid()
input('>> ')